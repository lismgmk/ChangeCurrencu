{"version":3,"sources":["a1-root/v6-Api/exchange-api.ts","a1-root/v5-redusers/initialReduser.ts","a1-root/v4-components/CurrencyElements/CurrensyElement.tsx","a1-root/v1-Main/Main.tsx","a1-root/v5-redusers/mainReduser.ts","a1-root/v2-SetExchange/SetExchange.tsx","a1-root/v5-redusers/setReduser.ts","a1-root/v5-redusers/mainArrayReduser.ts","a1-root/v3-Page_404/Page_404.tsx","a1-root/App.tsx","reportWebVitals.ts","a1-root/store.ts","index.tsx","a1-root/App.module.css","a1-root/v3-Page_404/Page_404.module.css"],"names":["instance","axios","create","baseURL","exchangeAPI","get","initialCurrencuAC","initial","type","CurrencyElement","React","memo","props","useState","alert","setAlert","useEffect","timer","setTimeout","clearTimeout","dateToday","date","slice","split","reverse","join","value","name","rate","copied","valueCur","setValueCur","Grid","style","backgroundColor","marginBottom","marginTop","container","spacing","item","xs","abbreviation","text","onCopy","Button","variant","color","Alert","severity","Main","refresh","setRefresh","dispatch","getState","currencyArray","mainArr","then","data","dataArr","filter","i","includes","Cur_Abbreviation","addCurrencuAC","useDispatch","currencu","useSelector","state","main","setFilter","filterCurrency","sort","a","b","Cur_ID","Cur_Name","justifyContent","CircularProgress","size","Container","map","index","id","Date","Math","ceil","Cur_OfficialRate","nanoid","onClick","useStyles","makeStyles","theme","margin","extendedIcon","marginRight","SetExchange","alertAdd","setAlertAdd","classes","allCurrency","set","mainArray","abbreviatureCurrensy","select","setSelect","inputs","setInput","hideInputs","setHideInputs","err","inputsArray","length","toUpperCase","direction","alignItems","TextField","error","label","multiline","onChange","e","currentTarget","ListItem","width","textAlign","button","ListItemText","primary","className","disabled","el","Page_404","App","AppBar","position","textDecoration","fontSize","to","PATH","EXCHANG_MAIN","activeClassName","activeLink","EXCHANG_SET","path","EXCHANG","exact","render","EXCHANG_404","from","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunk","window","ReactDOM","document","getElementById","module","exports"],"mappings":"oNAEMA,E,OAAWC,EAAMC,OAAO,CAC1BC,QAAS,oCAkBAC,EAAc,WAEnB,OAAOJ,EAASK,IAAT,yB,QCTFC,EAAoB,SAACC,GAAD,MAAuB,CAACC,KAAM,mBAAoBD,Y,0CCRtEE,EAAkBC,IAAMC,MAAK,SAACC,GAAgC,IAAD,EAExCC,oBAAkB,GAFsB,mBAE3DC,EAF2D,KAEpDC,EAFoD,KAGlEC,qBAAU,WACN,IAAMC,EAAQC,YAAW,WACrBH,GAAS,KACV,KACH,OAAO,kBAAMI,aAAaF,MAC3B,CAACH,IAEJ,IAAMM,EAAYR,EAAMS,KAAKC,MAAM,EAAG,IAAIC,MAAM,KAAKC,UAAUC,KAAK,KAVF,EAYlCZ,mBAAS,CACrCa,MAAO,CAAC,OAAQN,EAAW,WAAYR,EAAMe,KAAM,OAAQf,EAAMgB,KAAM,OAAOH,KAAK,KACnFI,QAAQ,IAdsD,mBAY3DC,EAZ2D,KAYjDC,EAZiD,KAiBlE,OAAQ,qCACA,eAACC,EAAA,EAAD,CAAMC,MAAO,CAACC,gBAAiB,qBAAsBC,aAAc,OAAQC,UAAW,QAASC,WAAS,EAClGC,QAAS,EADf,UAEI,cAACN,EAAA,EAAD,CAAMO,MAAI,EACJC,IAAE,EADR,SAGKpB,IAEL,cAACY,EAAA,EAAD,CAAMO,MAAI,EACJC,IAAE,EADR,SAGK5B,EAAMe,OAEX,cAACK,EAAA,EAAD,CAAMO,MAAI,EACJC,IAAE,EADR,SAGK5B,EAAMgB,OAEX,cAACI,EAAA,EAAD,CAAMO,MAAI,EACJC,IAAE,EADR,SAGK5B,EAAM6B,eAEX,cAACT,EAAA,EAAD,CAAMO,MAAI,EACJC,IAAE,EADR,SAGI,cAAC,kBAAD,CAAiBE,KAAMZ,EAASJ,MACfiB,OAAQ,WACJ5B,GAAS,GACTgB,EAAY,CACRF,QAAQ,EACRH,MAAO,CAACd,EAAMgB,KAAMhB,EAAMe,KAAMf,EAAMS,MAAMI,KAAK,QAL1E,SAQI,cAACmB,EAAA,EAAD,CAAQC,QAAQ,YAAYC,MAAM,UAAlC,yBAMXhC,GAAS,cAACiC,EAAA,EAAD,CAAOF,QAAQ,SAASG,SAAS,UAAjC,4C,0BC8EXC,EAhIFvC,IAAMC,MAAK,WAAO,IAAD,EACAE,oBAAkB,GADlB,mBACnBC,EADmB,KACZC,EADY,KAE1BC,qBAAU,WACN,IAAMC,EAAQC,YAAW,WACrBH,GAAS,KACV,KACH,OAAO,kBAAMI,aAAaF,MAC3B,CAACH,IAPsB,MAUID,oBAAS,GAVb,mBAUnBqC,EAVmB,KAUVC,EAVU,KAW1BnC,qBAAU,WACNoC,GCTiC,SAACA,EAAeC,GAErD,IAAIC,EAAgBD,IAAWE,QAC/BH,EAAS9C,GAAkB,IAC3BF,IACKoD,MAAK,SAAAC,GAEE,IAAMC,EAAUD,EAAKA,KAAKE,QAAO,SAAAC,GAC7B,OAAON,EAAcO,SAASD,EAAEE,qBAEpCV,EAZa,SAACM,GAAD,MAAmC,CAAClD,KAAM,WAAYkD,WAY1DK,CAAcL,IACvBN,EAAS9C,GAAkB,YDDpC,CAAC4C,IAGJ,IAAME,EAAWY,cACXC,EAAWC,aAAmD,SAAAC,GAAK,OAAIA,EAAMC,QAC7E7D,EAAU2D,aAAuC,SAAAC,GAAK,OAAIA,EAAM5D,QAAQA,WAlBpD,EAqBEM,mBAAgC,OArBlC,mBAqBnB8C,EArBmB,KAqBXU,EArBW,KAiCtBC,EAAiBL,EAarB,MAXc,MAAVN,IACAW,EAAiBL,EAASM,MAAK,SAACC,EAAGC,GAAJ,OAAWD,EAAEE,QAAUD,EAAEC,OAAS,GAAK,MAE5D,OAAVf,IACAW,EAAiBL,EAASM,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEV,iBAAmBW,EAAEX,iBAAmB,GAAK,MAE9E,QAAVH,IACAW,EAAiBL,EAASM,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEG,SAAWF,EAAEE,SAAW,GAAK,MAIxEpE,EACO,cAACyB,EAAA,EAAD,CACHK,WAAS,EACTG,GAAI,GACJoC,eAAe,SAHZ,SAKH,cAACC,EAAA,EAAD,CAAkB/B,MAAM,YACNgC,KAAM,QAK5B,eAACC,EAAA,EAAD,WACI,eAAC/C,EAAA,EAAD,CAAMK,WAAS,EAAf,UACI,cAACL,EAAA,EAAD,CAAMO,MAAI,EACJC,IAAE,EADR,SAGI,wCAEJ,cAACR,EAAA,EAAD,CAAMO,MAAI,EACJC,IAAE,EADR,SAGI,4CAEJ,cAACR,EAAA,EAAD,CAAMO,MAAI,EACJC,IAAE,EADR,SAGI,yCAEJ,cAACR,EAAA,EAAD,CAAMO,MAAI,EACJC,IAAE,EADR,SAGI,gDAEJ,cAACR,EAAA,EAAD,CAAMO,MAAI,EACJC,IAAE,EADR,SAGI,qDAGA8B,EAAeU,KAAI,SAACpB,EAAGqB,GACnB,OACI,cAACxE,EAAD,CAEIyE,GAAItB,EAAEc,OACNrD,KAAMuC,EAAEuB,KACRxD,KAAMiC,EAAEe,SACR/C,KAAMwD,KAAKC,KAA6B,KAAtBzB,EAAE0B,kBAA2B,IAC/C7C,aAAcmB,EAAEE,kBALXyB,qBAYzB,eAACvD,EAAA,EAAD,CAAMK,WAAS,EAACuC,eAAe,SAAStC,QAAS,EAC3CL,MAAO,CAACE,aAAc,QAD5B,UAtE0C,CAAC,KAAM,MAAO,QAyEvC6C,KAAI,SAAApB,GACb,OAAO,cAAC5B,EAAA,EAAD,CAAMO,MAAI,EAAV,SACH,eAACK,EAAA,EAAD,CAEIC,QAAQ,YACRC,MAAM,UACN0C,QAAS,WAjF7BnB,EAkFoCT,IALpB,qBAQaA,IAPJ2B,oBAWjB,cAACvD,EAAA,EAAD,CAAMO,MAAI,EAAV,SACI,cAACK,EAAA,EAAD,CAAQC,QAAQ,YAAYC,MAAM,UAAU0C,QAhGxC,WAChBrC,GAAYD,GACZnC,GAAS,IA8FG,0BAIPD,GAAS,cAACiC,EAAA,EAAD,CAAOF,QAAQ,SAASG,SAAS,UAAjC,kC,4CEnHhByC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACrCC,OAAQ,CACJA,OAAQD,EAAMrD,QAAQ,IAE1BuD,aAAc,CACVC,YAAaH,EAAMrD,QAAQ,QAItByD,EAAcrF,IAAMC,MAAK,WAAO,IAAD,EAEdE,oBAAkB,GAFJ,mBAEjCC,EAFiC,KAE1BC,EAF0B,OAGRF,oBAAkB,GAHV,mBAGjCmF,EAHiC,KAGvBC,EAHuB,KAKxCjF,qBAAU,WACN,IAAMC,EAAQC,YAAW,WACrB+E,GAAY,KACb,KACH,OAAO,kBAAM9E,aAAaF,MAC3B,CAAC+E,IAEJhF,qBAAU,WACN,IAAMC,EAAQC,YAAW,WACrBH,GAAS,KACV,KACH,OAAO,kBAAMI,aAAaF,MAC3B,CAACH,IAEJE,qBAAU,WACNoC,GCjCoC,SAACA,GACzCA,EAAS9C,GAAkB,IAC3BF,IACKoD,MAAK,SAAAC,GACEL,EANoD,CAAC5C,KAAM,mBAAoByD,SAMrDR,EAAKA,OACnCL,EAAS9C,GAAkB,YD6BhC,IAEH,IAAM4F,EAAUT,IAEVU,EAAcjC,aAAmD,SAAAC,GAAK,OAAIA,EAAMiC,OAChFC,EAAYnC,aAA6C,SAAAC,GAAK,OAAIA,EAAMZ,WACxEH,EAAWY,cAGXsC,EAAuBH,EAAYnB,KAAI,SAAApB,GACzC,OAAOA,EAAEE,oBA/B2B,EAkCZjD,mBAAS,IAlCG,mBAkCjC0F,EAlCiC,KAkCzBC,EAlCyB,OAmCb3F,mBAAS,IAnCI,mBAmCjC4F,EAnCiC,KAmCzBC,EAnCyB,OAoCJ7F,oBAAS,GApCL,mBAoCjC8F,EApCiC,KAoCrBC,EApCqB,KAqClCrG,EAAU2D,aAAuC,SAAAC,GAAK,OAAIA,EAAM5D,QAAQA,WAE1EsG,GAAe,EACfC,EAA6BR,EAAqB3C,QAAO,SAACC,EAAGqB,GAC7D,OAAqB,GAAjBwB,EAAOM,QACHnD,EAAE,IAAM6C,EAAO,GAAGO,eAKL,GAAjBP,EAAOM,QACHnD,EAAE,IAAM6C,EAAO,GAAGO,eAAiBpD,EAAE,IAAM6C,EAAO,GAAGO,eAKxC,GAAjBP,EAAOM,QACHnD,EAAE,IAAM6C,EAAO,GAAGO,eAAiBpD,EAAE,IAAM6C,EAAO,GAAGO,eAAiBpD,EAAE,IAAM6C,EAAO,GAAGO,eAXxFH,GAAM,GACC,QAeM,GAAjBJ,EAAOM,SACPF,GAAM,OAad,OAAItG,EACO,cAACyB,EAAA,EAAD,CACHK,WAAS,EACTG,GAAI,GACJoC,eAAe,SAHZ,SAKH,cAACC,EAAA,EAAD,CAAkB/B,MAAM,YACNgC,KAAM,QAK5B,cAACC,EAAA,EAAD,UACI,eAAC/C,EAAA,EAAD,CAAMK,WAAS,EACTC,QAAS,EACTsC,eAAe,SACfqC,UAAU,SACVC,WAAW,SAJjB,UAOI,eAAClF,EAAA,EAAD,CACIK,WAAS,EACTuC,eAAe,SACfqC,UAAU,SACVC,WAAW,SACX5E,QAAS,EACTE,GAAI,GANR,UAQI,cAACR,EAAA,EAAD,CACIO,MAAI,EACJD,QAAS,EACTE,GAAI,GAHR,SAKI,gDAGJ,cAACR,EAAA,EAAD,CAAMO,MAAI,EACJD,QAAS,EACTE,GAAI,GAFV,SAII,cAAC2E,EAAA,EAAD,CACIlF,MAAO,CAACC,gBAAiB,UAAWC,aAAc,QAClDiF,MAAOP,EACP3B,GAAG,kBACHmC,MAAOR,EAAM,4BAA8B,6BAC3CS,WAAS,EACTzE,QAAQ,SACRnB,MAAO+E,EACPc,SAAU,SAACC,GACPd,EAASc,EAAEC,cAAc/F,YAMpCiF,GAAcG,EAAY9B,KAAI,SAACpB,EAAGqB,GAC/B,OAAO,cAACjD,EAAA,EAAD,CAAMO,MAAI,EACJC,GAAI,GADV,SAGH,cAACkF,EAAA,EAAD,CACIzF,MAAO,CACHC,gBAAiB,UACjByF,MAAO,QACPC,UAAW,SACXzF,aAAc,OACdC,UAAW,QAGfyF,QAAM,EATV,SAUI,cAACC,EAAA,EAAD,CAEItC,QAAS,WACLoB,GAAc,GACdF,EAAS9C,GACT4C,EAAU5C,IAEdmE,QAASnE,KATR2B,oBAgBhBS,GAAY,cAACjD,EAAA,EAAD,CAAOF,QAAQ,SAASG,SAAS,UAAjC,6BACX2D,GACF,cAAC3E,EAAA,EAAD,CAAMO,MAAI,EACJD,QAAS,EACTE,GAAI,GAFV,SAII,cAACI,EAAA,EAAD,CAAQoF,UAAW9B,EAAQN,OACnBqC,SAAUpB,EACVhE,QAAQ,YACRC,MAAM,UACN0C,QArGR,WAChBpC,EEhFqC,CAAC5C,KAAM,WAAY0H,GFgFlC3B,IACtBG,EAAS,IACTI,EAAc,GACdN,EAAU,IACVI,GAAc,GACdX,GAAY,IA2FI,+BAWPI,EAAUrB,KAAI,SAACpB,EAAGqB,GACf,OAAO,cAACjD,EAAA,EAAD,CACHK,WAAS,EACTG,IAAE,EACFoC,eAAe,SACftC,QAAS,EAJN,SAMH,eAACoF,EAAA,EAAD,CAEIG,QAAM,EACN5F,MAAO,CACHC,gBAAiB,UACjByF,MAAO,QACPC,UAAW,SACXxF,UAAW,OACXD,aAAc,QARtB,UAWI,cAAC2F,EAAA,EAAD,CACIC,QAASnE,IAEb,cAAChB,EAAA,EAAD,CAAQC,QAAQ,YAAYC,MAAM,UAAU0C,QAAS,WACjDpC,EEhNa,CAAC5C,KAAM,WAAY0H,GFgNVtE,IACtB7C,GAAS,IAFb,+BAbKwE,oBAyBhBzE,GAAS,cAACiC,EAAA,EAAD,CAAOF,QAAQ,SACRG,SAAS,UADhB,sC,iBGjOXmF,EAREzH,IAAMC,MAAK,WAC1B,OACE,qBAAKqH,UAAW/F,IAAMmG,IAAtB,SACE,+C,SCuCSA,MApCf,WACI,OACI,gCACI,cAACC,EAAA,EAAD,CAAQC,SAAS,SAAjB,SACI,eAACtG,EAAA,EAAD,CACIC,MAAO,CAAC2D,OAAQ,QAChBvD,WAAS,EACTuC,eAAe,eAHnB,UAII,cAAC,IAAD,CACI3C,MAAO,CAACsG,eAAgB,OAAQzF,MAAO,QAAS0F,SAAU,QAC1DC,GAAIC,EAAKC,aAAcC,gBAAiB3G,IAAM4G,WAFlD,kBAKA,cAAC,IAAD,CACI5G,MAAO,CAACsG,eAAgB,OAAQzF,MAAO,QAAS0F,SAAU,QAASC,GAAIC,EAAKI,YADhF,sBAUR,eAAC,IAAD,WACI,cAAC,IAAD,CAAOC,KAAML,EAAKM,QAASC,OAAK,EAACC,OAAQ,kBAAM,cAAC,IAAD,CAAUT,GAAIC,EAAKC,kBAElE,cAAC,IAAD,CAAOM,OAAK,EAACF,KAAML,EAAKC,aAAcO,OAAQ,kBAAM,cAAC,EAAD,OACpD,cAAC,IAAD,CAAOD,OAAK,EAACF,KAAML,EAAKI,YAAaI,OAAQ,kBAAM,cAACnD,EAAD,OACnD,cAAC,IAAD,CAAOkD,OAAK,EAACF,KAAML,EAAKS,YAAaD,OAAQ,kBAAM,cAAC,EAAD,OAEnD,cAAC,IAAD,CAAUE,KAAM,IAAKX,GAAIC,EAAKS,qBAQjCT,EAAO,CAChBM,QAAS,mBACTL,aAAc,uBACdG,YAAa,6BACbK,YAAa,uBCrCFE,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqB/F,MAAK,YAAkD,IAA/CgG,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,gBCARO,EAAcC,YAAgB,CAChC1F,KPNuB,WACrB,IADsBD,EACvB,uDADoD,GAAI4F,EACxD,uCACD,OAAQA,EAAOvJ,MACX,IAAK,WACD,OAAOuJ,EAAOrG,QAClB,QACI,OAAOS,IOCfZ,QJV4B,WAG1B,IAH2BY,EAG5B,uDAHmD,CAAC,MAAO,MAAO,OAAQ4F,EAG1E,uCACD,OAAQA,EAAOvJ,MACX,IAAK,WACF,OAAO,YAAI2D,GAAON,SAASkG,EAAO7B,IAA3B,YAAqC/D,GAArC,sBAAkDA,GAAlD,CAAyD4F,EAAO7B,KAE1E,IAAK,WACD,OAAO,YAAI/D,GAAOR,QAAO,SAAApB,GAAI,OAAIA,IAASwH,EAAO7B,MACpD,QACG,OAAO/D,IIAfiC,ILTsB,WAEpB,IAFqBjC,EAEtB,uDAFmD,GAAI4F,EAEvD,uCACD,OAAQA,EAAOvJ,MACX,IAAK,mBACD,OAAOuJ,EAAO9F,SACjB,QACG,OAAOE,IKGf5D,QVX0B,WAExB,IAFyB4D,EAE1B,uDAFsD,CAAC5D,SAAS,GAASwJ,EAEzE,uCACD,OAAQA,EAAOvJ,MACX,IAAK,mBACD,OAAO,2BAAI2D,GAAX,IAAkB5D,QAASwJ,EAAOxJ,UACrC,QACG,OAAO4D,MUON6F,EAAQC,YAAYJ,EAAaK,YAAgBC,MAI9DC,OAAOJ,MAAQA,ECXfK,IAASnB,OACL,cAAC,IAAD,UACI,cAAC,IAAD,CAAUc,MAAOA,EAAjB,SACI,cAAC,EAAD,QAGRM,SAASC,eAAe,SAM5BlB,K,mBCpBAmB,EAAOC,QAAU,CAAC,IAAM,mB,mBCAxBD,EAAOC,QAAU,CAAC,IAAM,wB","file":"static/js/main.2ff38dbd.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://www.nbrb.by/API/ExRates',\r\n})\r\n\r\nexport type CurrencyType = {\r\n    Cur_ID: number,\r\n    Date: string,\r\n    Cur_Abbreviation: string,\r\n    Cur_Scale: number,\r\n    Cur_Name: string,\r\n    Cur_OfficialRate: string\r\n}\r\nexport type CurrencyOneType = {\r\n    Cur_ID: number,\r\n    Cur_Name: string,\r\n}\r\n\r\n\r\n\r\nexport const exchangeAPI = {\r\n    getCurrency() {\r\n        return instance.get<Array<CurrencyType>>(`/Rates?Periodicity=0`)\r\n    }\r\n}\r\n\r\n\r\n","import {CurrencyType, exchangeAPI} from \"../v6-Api/exchange-api\";\n\nexport const initialReduser = (state: {initial: boolean} = {initial: false} , action: ReturnType<typeof initialCurrencuAC>\n\n) => {\n    switch (action.type) {\n        case \"INITIAL_CURRENCU\":\n            return {...state, initial: action.initial}\n         default:\n            return state\n    }\n}\n\n\nexport const initialCurrencuAC = (initial: boolean) => ({type: \"INITIAL_CURRENCU\", initial}) as const\n\n\n\n","import React, {useEffect, useState} from 'react';\nimport {Paper, Box, Button, Grid} from \"@material-ui/core\";\nimport {CopyToClipboard} from 'react-copy-to-clipboard';\nimport style from '../../v1-Main/Main.module.css'\nimport {Alert} from \"@material-ui/lab\";\n\nexport const CurrencyElement = React.memo((props: CurrencyElementType) => {\n\n        const [alert, setAlert] = useState<boolean>(false)\n        useEffect(() => {\n            const timer = setTimeout(() => {\n                setAlert(false)\n            }, 3000);\n            return () => clearTimeout(timer);\n        }, [alert]);\n\n        const dateToday = props.date.slice(0, 10).split('-').reverse().join('-')\n\n        const [valueCur, setValueCur] = useState({\n            value: ['Date', dateToday, 'Currency', props.name, 'Rate', props.rate, 'BYN'].join(' '),\n            copied: false,\n        })\n\n        return (<>\n                <Grid style={{backgroundColor: 'rgb(207, 232, 252)', marginBottom: '10px', marginTop: \"10px\"}} container\n                      spacing={2}>\n                    <Grid item\n                          xs\n                    >\n                        {dateToday}\n                    </Grid>\n                    <Grid item\n                          xs\n                    >\n                        {props.name}\n                    </Grid>\n                    <Grid item\n                          xs\n                    >\n                        {props.rate}\n                    </Grid>\n                    <Grid item\n                          xs\n                    >\n                        {props.abbreviation}\n                    </Grid>\n                    <Grid item\n                          xs\n                    >\n                        <CopyToClipboard text={valueCur.value}\n                                         onCopy={() => {\n                                             setAlert(true)\n                                             setValueCur({\n                                                 copied: true,\n                                                 value: [props.rate, props.name, props.date].join(' ')\n                                             })\n                                         }}>\n                            <Button variant=\"contained\" color=\"primary\">Copy</Button>\n                        </CopyToClipboard>\n                    </Grid>\n\n\n                </Grid>\n                {alert && <Alert variant=\"filled\" severity=\"success\">Data copied to clipboard</Alert>}\n            </>\n\n\n        )\n\n    }\n)\n\ntype CurrencyElementType = {\n    id: number\n    date: string\n    name: string\n    rate: number\n    abbreviation: string\n}\n","import React, {useCallback, useEffect, useState} from 'react';\nimport style from './Main.module.css'\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {\n    fetchCurerencyThunk,\n} from \"../v5-redusers/mainReduser\";\nimport {AppRootStateType} from \"../store\";\nimport {CurrencyType} from \"../v6-Api/exchange-api\";\nimport {CurrencyElement} from \"../v4-components/CurrencyElements/CurrensyElement\";\nimport {Box, Button, CircularProgress, Container, Grid} from \"@material-ui/core\";\nimport {nanoid} from 'nanoid'\nimport {Alert} from \"@material-ui/lab\";\n\nconst Main = React.memo(() => {\n    const [alert, setAlert] = useState<boolean>(false)\n    useEffect(() => {\n        const timer = setTimeout(() => {\n            setAlert(false)\n        }, 3000);\n        return () => clearTimeout(timer);\n    }, [alert]);\n\n\n    const [refresh, setRefresh] = useState(false)\n    useEffect(function () {\n        dispatch(fetchCurerencyThunk())\n    }, [refresh])\n\n\n    const dispatch = useDispatch();\n    const currencu = useSelector<AppRootStateType, Array<CurrencyType>>(state => state.main);\n    const initial = useSelector<AppRootStateType, boolean>(state => state.initial.initial);\n\n\n    const [filter, setFilter] = useState<'id' | 'abr' | 'name'>('abr')\n\n    const refreshData = () => {\n        setRefresh(!refresh)\n        setAlert(true)\n    }\n\n    const setFilterId = (val: 'id' | 'abr' | 'name') => {\n        setFilter(val)\n    }\n    const buttonsName: Array<'id' | 'abr' | 'name'> = ['id', 'abr', 'name']\n\n    let filterCurrency = currencu\n\n    if (filter == 'id') {\n        filterCurrency = currencu.sort((a, b) => +a.Cur_ID > +b.Cur_ID ? 1 : -1)\n    }\n    if (filter == 'abr') {\n        filterCurrency = currencu.sort((a, b) => a.Cur_Abbreviation > b.Cur_Abbreviation ? 1 : -1)\n    }\n    if (filter == 'name') {\n        filterCurrency = currencu.sort((a, b) => a.Cur_Name > b.Cur_Name ? 1 : -1)\n    }\n\n\n    if (initial) {\n        return <Grid\n            container\n            xs={12}\n            justifyContent=\"center\"\n        >\n            <CircularProgress color=\"secondary\"\n                              size={100}\n            />\n        </Grid>\n    }\n    return (\n        <Container>\n            <Grid container>\n                <Grid item\n                      xs\n                >\n                    <h3>Date</h3>\n                </Grid>\n                <Grid item\n                      xs\n                >\n                    <h3>Currency</h3>\n                </Grid>\n                <Grid item\n                      xs\n                >\n                    <h3>Rates</h3>\n                </Grid>\n                <Grid item\n                      xs\n                >\n                    <h3>Abbreviation</h3>\n                </Grid>\n                <Grid item\n                      xs\n                >\n                    <h3>Copy to clipboard</h3>\n                </Grid>\n                {\n                    filterCurrency.map((i, index) => {\n                        return (\n                            <CurrencyElement\n                                key={nanoid()}\n                                id={i.Cur_ID}\n                                date={i.Date}\n                                name={i.Cur_Name}\n                                rate={Math.ceil((+i.Cur_OfficialRate) * 100) / 100}\n                                abbreviation={i.Cur_Abbreviation}\n                            />\n                        )\n                    })\n                }\n            </Grid>\n\n            <Grid container justifyContent=\"center\" spacing={2}\n                  style={{marginBottom: \"10px\"}}\n            >\n                {buttonsName.map(i => {\n                    return <Grid item>\n                        <Button\n                            key={nanoid()}\n                            variant=\"contained\"\n                            color=\"primary\"\n                            onClick={() => {\n                                setFilterId(i)\n                            }\n                            }>\n                            Sort by {i}\n                        </Button>\n                    </Grid>\n                })}\n                <Grid item>\n                    <Button variant=\"contained\" color=\"primary\" onClick={refreshData}>Refrech</Button>\n                </Grid>\n            </Grid>\n\n            {alert && <Alert variant=\"filled\" severity=\"success\">Data refreshed</Alert>}\n        </Container>\n    )\n})\n\nexport default Main\n","import {CurrencyType, exchangeAPI} from \"../v6-Api/exchange-api\";\nimport {AppRootStateType} from \"../store\";\nimport {initialCurrencuAC} from \"./initialReduser\";\n\nexport const mainReduser = (state: Array<CurrencyType> = [], action: ReturnType<typeof addCurrencuAC>\n) => {\n    switch (action.type) {\n        case \"ADD_DATA\":\n            return action.dataArr\n        default:\n            return state\n    }\n}\n\nexport const addCurrencuAC = (dataArr: Array<CurrencyType>) => ({type: \"ADD_DATA\", dataArr}) as const\n\nexport const fetchCurerencyThunk = () => (dispatch: any, getState: AppRootStateType) => {\n// @ts-ignore\n    let currencyArray = getState().mainArr\n    dispatch(initialCurrencuAC(true))\n    exchangeAPI.getCurrency()\n        .then(data => {\n\n                const dataArr = data.data.filter(i => {\n                    return currencyArray.includes(i.Cur_Abbreviation)\n                })\n                dispatch(addCurrencuAC(dataArr))\n                dispatch(initialCurrencuAC(false))\n            }\n        )\n}\n\n","import React, {useEffect, useState} from 'react';\nimport style from './Set.module.css'\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../store\";\nimport {CurrencyType} from \"../v6-Api/exchange-api\";\nimport {fetchAllCurerencyThunk} from \"../v5-redusers/setReduser\";\nimport {addElArrayAC, delElArrayAC} from \"../v5-redusers/mainArrayReduser\";\nimport {\n    Button,\n    CircularProgress,\n    Container, Grid,\n    ListItem,\n    ListItemText,\n    makeStyles, Paper,\n    Select,\n    TextField\n} from \"@material-ui/core\";\nimport {nanoid} from 'nanoid'\nimport {Alert} from \"@material-ui/lab\";\n\n\nconst useStyles = makeStyles((theme) => ({\n    margin: {\n        margin: theme.spacing(2),\n    },\n    extendedIcon: {\n        marginRight: theme.spacing(2),\n    },\n}));\n\nexport const SetExchange = React.memo(() => {\n\n    const [alert, setAlert] = useState<boolean>(false);\n    const [alertAdd, setAlertAdd] = useState<boolean>(false);\n\n    useEffect(() => {\n        const timer = setTimeout(() => {\n            setAlertAdd(false)\n        }, 3000);\n        return () => clearTimeout(timer);\n    }, [alertAdd]);\n\n    useEffect(() => {\n        const timer = setTimeout(() => {\n            setAlert(false)\n        }, 3000);\n        return () => clearTimeout(timer);\n    }, [alert]);\n\n    useEffect(() => {\n        dispatch(fetchAllCurerencyThunk())\n    }, [])\n\n    const classes = useStyles();\n\n    const allCurrency = useSelector<AppRootStateType, Array<CurrencyType>>(state => state.set);\n    const mainArray = useSelector<AppRootStateType, Array<string>>(state => state.mainArr);\n    const dispatch = useDispatch();\n\n\n    const abbreviatureCurrensy = allCurrency.map(i => {\n        return i.Cur_Abbreviation\n    })\n\n    const [select, setSelect] = useState('')\n    const [inputs, setInput] = useState('')\n    const [hideInputs, setHideInputs] = useState(true)\n    const initial = useSelector<AppRootStateType, boolean>(state => state.initial.initial)\n\n    let err: boolean = true\n    let inputsArray: Array<string> = abbreviatureCurrensy.filter((i, index) => {\n        if (inputs.length == 1) {\n            if (i[0] == inputs[0].toUpperCase()) {\n                err = false\n                return true\n            }\n        }\n        if (inputs.length == 2) {\n            if (i[0] == inputs[0].toUpperCase() && i[1] == inputs[1].toUpperCase()) {\n                err = false\n                return true\n            }\n        }\n        if (inputs.length == 3) {\n            if (i[0] == inputs[0].toUpperCase() && i[1] == inputs[1].toUpperCase() && i[2] == inputs[2].toUpperCase()) {\n                err = false\n                return true\n            }\n        }\n        if (inputs.length == 0) {\n            err = false\n        }\n\n    })\n\n    const addCurrencu = () => {\n        dispatch(addElArrayAC(select))\n        setInput('')\n        inputsArray = []\n        setSelect('')\n        setHideInputs(true)\n        setAlertAdd(true)\n    }\n    if (initial) {\n        return <Grid\n            container\n            xs={12}\n            justifyContent=\"center\"\n        >\n            <CircularProgress color=\"secondary\"\n                              size={100}\n            />\n        </Grid>\n    }\n    return (\n        <Container>\n            <Grid container\n                  spacing={1}\n                  justifyContent=\"center\"\n                  direction=\"column\"\n                  alignItems=\"center\"\n            >\n\n                <Grid\n                    container\n                    justifyContent=\"center\"\n                    direction=\"column\"\n                    alignItems=\"center\"\n                    spacing={2}\n                    xs={12}\n                >\n                    <Grid\n                        item\n                        spacing={2}\n                        xs={12}\n                    >\n                        <h1>Add currency</h1>\n                    </Grid>\n\n                    <Grid item\n                          spacing={1}\n                          xs={12}\n                    >\n                        <TextField\n                            style={{backgroundColor: '#cfe8fc', marginBottom: '10px'}}\n                            error={err}\n                            id=\"filled-textarea\"\n                            label={err ? \"there is no such currency\" : \"enter abbreviation here...\"}\n                            multiline\n                            variant=\"filled\"\n                            value={inputs}\n                            onChange={(e) => {\n                                setInput(e.currentTarget.value)\n                            }}\n                        />\n                    </Grid>\n\n\n                    {hideInputs && inputsArray.map((i, index) => {\n                        return <Grid item\n                                     xs={12}\n                        >\n                            <ListItem\n                                style={{\n                                    backgroundColor: '#cfe8fc',\n                                    width: '150px',\n                                    textAlign: \"center\",\n                                    marginBottom: \"10px\",\n                                    marginTop: \"10px\"\n                                }}\n                                key={nanoid()}\n                                button>\n                                <ListItemText\n\n                                    onClick={() => {\n                                        setHideInputs(false)\n                                        setInput(i)\n                                        setSelect(i)\n                                    }}\n                                    primary={i}\n                                /></ListItem>\n                        </Grid>\n\n                    })\n                    }\n\n                    {alertAdd && <Alert variant=\"filled\" severity=\"success\">Currency added</Alert>}\n                    {!hideInputs &&\n                    <Grid item\n                          spacing={2}\n                          xs={12}\n                    >\n                        <Button className={classes.margin}\n                                disabled={err}\n                                variant=\"contained\"\n                                color=\"primary\"\n                                onClick={addCurrencu}>\n                            Add Currencu</Button>\n                    </Grid>\n                    }\n                </Grid>\n\n\n                {mainArray.map((i, index) => {\n                    return <Grid\n                        container\n                        xs\n                        justifyContent=\"center\"\n                        spacing={2}\n                    >\n                        <ListItem\n                            key={nanoid()}\n                            button\n                            style={{\n                                backgroundColor: '#cfe8fc',\n                                width: '100vh',\n                                textAlign: \"center\",\n                                marginTop: \"20px\",\n                                marginBottom: \"20px\"\n                            }}\n                        >\n                            <ListItemText\n                                primary={i}\n                            />\n                            <Button variant=\"contained\" color=\"primary\" onClick={() => {\n                                dispatch(delElArrayAC(i))\n                                setAlert(true)\n                            }\n                            }>Delete\n                                Currencu</Button>\n\n                        </ListItem>\n                    </Grid>\n\n\n                })}\n                {alert && <Alert variant=\"filled\"\n                                 severity=\"success\">Currency deleted</Alert>\n\n                }\n\n\n            </Grid>\n        </Container>\n\n    )\n})\n\n","import {CurrencyType, exchangeAPI} from \"../v6-Api/exchange-api\";\nimport {initialCurrencuAC} from \"./initialReduser\";\n\nexport const setReduser = (state: Array<CurrencyType> = [], action: ReturnType<typeof addAllCurrencuAC>\n\n) => {\n    switch (action.type) {\n        case \"ADD_ALL_CURRENCU\":\n            return action.currencu\n         default:\n            return state\n    }\n}\n\n\nexport const addAllCurrencuAC = (currencu: Array<CurrencyType>) => ({type: \"ADD_ALL_CURRENCU\", currencu}) as const\n\nexport const fetchAllCurerencyThunk = () => (dispatch: any) => {\n    dispatch(initialCurrencuAC(true))\n    exchangeAPI.getCurrency()\n        .then(data => {\n                dispatch(addAllCurrencuAC(data.data))\n            dispatch(initialCurrencuAC(false))\n            }\n        )\n}\n\n","\nexport const mainArrayReduser = (state: Array<string> = ['USD', 'RUB', 'EUR'], action:\n    | ReturnType<typeof addElArrayAC>\n    | ReturnType<typeof delElArrayAC>\n) => {\n    switch (action.type) {\n        case \"ADD_ELEM\":\n           return [...state].includes(action.el) ? [...state] : [...state, action.el]\n\n        case \"DEL_ELEM\":\n            return [...state].filter(item => item !== action.el)\n         default:\n            return state\n    }\n}\n\nexport const addElArrayAC = (el: string) => ({type: \"ADD_ELEM\", el}) as const\nexport const delElArrayAC = (el: string) => ({type: \"DEL_ELEM\", el}) as const\n\n// 2021-08-21T00:00:00","import React from 'react';\nimport style from './Page_404.module.css'\n\nconst Page_404 = React.memo(() => {\n  return (\n    <div className={style.App}>\n      <h1>Page 404</h1>\n    </div>\n  )\n})\n\nexport default Page_404;\n","import React from 'react';\nimport {Switch, Route, Redirect, NavLink} from 'react-router-dom';\nimport style from './App.module.css'\nimport Main from \"./v1-Main/Main\";\nimport {SetExchange} from \"./v2-SetExchange/SetExchange\";\nimport Page_404 from \"./v3-Page_404/Page_404\";\nimport {AppBar, Button, Grid, Paper, Typography} from \"@material-ui/core\";\n\n\nfunction App() {\n    return (\n        <div>\n            <AppBar position=\"static\">\n                <Grid\n                    style={{margin: \"30px\"}}\n                    container\n                    justifyContent=\"space-around\">\n                    <NavLink\n                        style={{textDecoration: \"none\", color: \"white\", fontSize: \"26px\"}}\n                        to={PATH.EXCHANG_MAIN} activeClassName={style.activeLink}>\n                        Main\n                    </NavLink>\n                    <NavLink\n                        style={{textDecoration: \"none\", color: \"white\", fontSize: \"26px\"}} to={PATH.EXCHANG_SET}\n                       >\n                        Set\n                    </NavLink>\n                </Grid>\n\n\n\n            </AppBar>\n            <Switch>\n                <Route path={PATH.EXCHANG} exact render={() => <Redirect to={PATH.EXCHANG_MAIN}/>}/>\n\n                <Route exact path={PATH.EXCHANG_MAIN} render={() => <Main/>}/>\n                <Route exact path={PATH.EXCHANG_SET} render={() => <SetExchange/>}/>\n                <Route exact path={PATH.EXCHANG_404} render={() => <Page_404/>}/>\n\n                <Redirect from={'*'} to={PATH.EXCHANG_404}/>\n            </Switch>\n        </div>\n    )\n}\n\nexport default App\n\nexport const PATH = {\n    EXCHANG: '/ChangeCurrencu/',\n    EXCHANG_MAIN: '/ChangeCurrencu/main',\n    EXCHANG_SET: '/ChangeCurrencu/setReduser',\n    EXCHANG_404: '/ChangeCurrencu/404',\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, createStore} from 'redux';\nimport thunk from \"redux-thunk\";\nimport {mainReduser} from \"./v5-redusers/mainReduser\";\nimport {setReduser} from \"./v5-redusers/setReduser\";\nimport {mainArrayReduser} from \"./v5-redusers/mainArrayReduser\";\nimport {initialReduser} from \"./v5-redusers/initialReduser\";\n\n\n\nconst rootReducer = combineReducers({\n    main: mainReduser,\n    mainArr: mainArrayReduser,\n    set: setReduser,\n    initial: initialReduser\n})\n\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\nexport type AppRootStateType = ReturnType<typeof rootReducer>\n\n// @ts-ignore\nwindow.store = store;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './a1-root/App';\nimport reportWebVitals from './reportWebVitals';\nimport {BrowserRouter, HashRouter} from \"react-router-dom\";\nimport {Provider} from \"react-redux\";\nimport {store} from \"./a1-root/store\";\n\nReactDOM.render(\n    <BrowserRouter>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </BrowserRouter>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__31Bkx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"Page_404_App__1k_Y9\"};"],"sourceRoot":""}